package pippin;

import java.util.Map;
import java.util.TreeMap;
import java.util.Observable;

public class MachineModel extends Observable
{
  //Fields ----------------------------------------------------------------
	public final Map<Integer, Instruction> INSTRUCTION_MAP = new TreeMap<>();
	private Registers cpu = new Registers();
	private Memory memory = new Memory();
	private boolean withGUI = false;
	private Code code;
  private boolean running = false;

  //Inner Class ------------------------------------------------------------
	public class Registers
	{
		private int accumulator;
		private int programCounter;
	}

	

  /**
  * Machine Model Constructor withGUI
  *
  * The instruction ROT allows elements in memory to be shifted a certain
  * defined amount of spaces in memory within a limited memory block.
  *
  * <p> This instruction defines map entries to access the elements within 
  * the memory block that will undergo rotation. Entries are provided to store 
  * save, and/or move memory values. Each of these instruction entries exist in 
  * two forms: one throws an exception {@throws IllegalArgumentException for
  * illegal indirection level in ROT} if the operation fails, the other runs
  * the ROT operation. The instruction throws an exception if the level 
  * is not equal to one; another exception is thrown if start and/or length is 
  * equal to zero, start + length + -1 is greater than the data size {@value #DATA_SIZE},
  * or both start is less than arg + 2 {@param arg inputted argument} and 
  * start + length + -1 is less than or equal to arg; the last map entry rotates 
  * the memory elements based on the starting index, the number of indexes within 
  * the memory block, and the number of spaces to rotate each element.
  * 
  * <p>The table shows memory locations and their values in memory
  * - next table shows how memory looks after shifting.
  *
  * <table BORDER CELLPADDING=3 CELLSPACING=1>
  * <caption>Original Memory Configuration</caption>
  *  <tr>
  *    <td ALIGN=CENTER COLSPAN = 1> <b>Memory Location</b></td>
  *    <td ALIGN=CENTER COLSPAN = 1> <b>Value in memory</b></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>07</em></td>
  *    <td ALIGN=CENTER><em>-2490</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>08</em></td>
  *    <td ALIGN=CENTER><em>-2480</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>09</em></td>
  *    <td ALIGN=CENTER><em>-2470</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>10</em></td>
  *    <td ALIGN=CENTER><em>-2460</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>11</em></td>
  *    <td ALIGN=CENTER><em>-2450</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>12</em></td>
  *    <td ALIGN=CENTER><em>-2440</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>13</em></td>
  *    <td ALIGN=CENTER><em>-2430</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>14</em></td>
  *    <td ALIGN=CENTER><em>-2420</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>15</em></td>
  *    <td ALIGN=CENTER><em>-2410</em></td>
  *  </tr>
  * </table>
  *
  * <p>When this instruction is called with arg = 40 and memory locations having
  * the following set values, 40 : 7, 41 : 9 and 42 : -3, then ROT will be
  * sucessfully executed with the new shifted memory displayed below.
  *
  * <table BORDER CELLPADDING=3 CELLSPACING=1>
  * <caption>Shifted Memory Configuration</caption>
  *  <tr>
  *    <td ALIGN=CENTER COLSPAN = 1> <b>Memory Location</b></td>
  *    <td ALIGN=CENTER COLSPAN = 1> <b>Value in memory</b></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>07</em></td>
  *    <td ALIGN=CENTER><em>-2460</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>08</em></td>
  *    <td ALIGN=CENTER><em>-2450</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>09</em></td>
  *    <td ALIGN=CENTER><em>-2440</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>10</em></td>
  *    <td ALIGN=CENTER><em>-2430</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>11</em></td>
  *    <td ALIGN=CENTER><em>-2420</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>12</em></td>
  *    <td ALIGN=CENTER><em>-2410</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>13</em></td>
  *    <td ALIGN=CENTER><em>-2490</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>14</em></td>
  *    <td ALIGN=CENTER><em>-2480</em></td>
  *  </tr>
  *  <tr>
  *    <td ALIGN=CENTER><em>15</em></td>
  *    <td ALIGN=CENTER><em>-2470</em></td>
  *  </tr>
  * </table>
  *
  * <p>ROT uses arg {@param arg inputted argument} to go to arg's memory
  * location and retrieves the value stored in that location as well as the next
  * two memory values to set as the variables start, length, and move respectively.
  * start is the first memory location of the memory block that will be shifted 
  * (where shifting will begin), length is the size of the memory block, and move 
  * is the number of memory lines the values are to be shifted.
  *
  * <p>If the values of start and length don't throw an IllegalArgumentException
  * the instruction moves on to shift the values in memory.
  *
  * <p>The accumulator gets set to the first value in memory that will be
  * altered (the value in memory location 'start' if the variable 'move' is
  * negative or the value in the last memory location of the block if the
  * variable 'move' is positive). The memory values then proceed to start shifting
  * by ROT implementations, and continue to shift until the last memory location 
  * is moved. The value stored in the accumulator is then placed in the final 
  * shifted memory location. 
  *
  * <p>The first memory value is saved in the accumulator so that it will be
  * immediately overwritten and, later, placed in the memory location of the
  * last shifted value.    
  *
  * @author Omowumi Lynda Ademola
  * @author Rachael Wang
  * @since  1.8
	*/
	public MachineModel(boolean withGUI){
		this.withGUI = withGUI;
  
  //INSTRUCTION_MAP entry for NOP -----------------------------------------
  INSTRUCTION_MAP.put(0x0, (arg, level) -> {
    if(level == 0){
      cpu.programCounter++;
    } else{
      throw new IllegalArgumentException(
        "Illegal indirection level in NOP instruction");
    }
  });
  
  //INSTRUCTION_MAP entry for LOD -----------------------------------------
  INSTRUCTION_MAP.put(0x1, (arg, level) -> {
    if(level < 0 || level > 2){
      throw new IllegalArgumentException(
    "Illegal indirection level in LOD instruction");
    } else if(level > 0){
      INSTRUCTION_MAP.get(0x1).execute(memory.getData(arg), level-1);
    } else{
      cpu.accumulator = arg;
      cpu.programCounter++;
    }
  });
  
  //INSTRUCTION_MAP entry for STO -----------------------------------------
  INSTRUCTION_MAP.put(0x2, (arg, level) -> {
    if(level != 1 && level != 2){
      throw new IllegalArgumentException(
        "Illegal indirection level in STO instruction");
    } else if(level == 1){
      memory.setData(arg, cpu.accumulator);
      cpu.programCounter++;
    } else if(level == 2){
      INSTRUCTION_MAP.get(0x2).execute(memory.getData(arg), level-1);
    } 
  });
  
	//INSTRUCTION_MAP entry for "ADD" ---------------------------------------
	INSTRUCTION_MAP.put(0x3, (arg, level) -> {
		if(level < 0 || level > 2){
			throw new IllegalArgumentException(
				"Illegal indirection level in ADD instruction");
    } else if(level > 0){
			INSTRUCTION_MAP.get(0x3).execute(memory.getData(arg), level-1);
    } else{
			cpu.accumulator += arg;
			cpu.programCounter++;
		}
	});
  
  //INSTRUCTION_MAP entry for "SUB" ---------------------------------------
  INSTRUCTION_MAP.put(0x4, (arg, level) -> {
		if(level < 0 || level > 2){
			throw new IllegalArgumentException(
				"Illegal indirection level in SUB instruction");
    } else if(level > 0){
			INSTRUCTION_MAP.get(0x4).execute(memory.getData(arg), level-1);
    } else{
			cpu.accumulator -= arg;
			cpu.programCounter++;
		}    
  });
  
  //INSTRUCTION_MAP entry for "MUL" ---------------------------------------
  INSTRUCTION_MAP.put(0x5, (arg, level) -> {
		if(level < 0 || level > 2){
			throw new IllegalArgumentException(
				"Illegal indirection level in MUL instruction");
    } else if(level > 0){
			INSTRUCTION_MAP.get(0x5).execute(memory.getData(arg), level-1);
    } else{
			cpu.accumulator *= arg;
			cpu.programCounter++;
		}    
  });
  
  //INSTRUCTION_MAP entry for "DIV" ---------------------------------------
  INSTRUCTION_MAP.put(0x6, (arg, level) -> {
		if(level < 0 || level > 2){
			throw new IllegalArgumentException(
				"Illegal indirection level in DIV instruction");
    } else if(level > 0){
			INSTRUCTION_MAP.get(0x6).execute(memory.getData(arg), level-1);
    } else{
        if(arg == 0){
          throw new DivideByZeroException(
            "Division by Zero");
        } else{
            cpu.accumulator /= arg;
            cpu.programCounter++;          
        }
		}    
  });
  
  //INSTRUCTION_MAP entry for "AND" ---------------------------------------
  INSTRUCTION_MAP.put(0x7, (arg, level) -> {
    if(level > 1 || level < 0){
      throw new IllegalArgumentException(
        "Illegal indirection level in AND instruction");
    } else if(level == 1){
      INSTRUCTION_MAP.get(0x7).execute(memory.getData(arg), level-1);
    } else{
        if(arg != 0 && cpu.accumulator != 0){
          cpu.accumulator = 1;
          cpu.programCounter++;
        } else{
          cpu.accumulator = 0;
          cpu.programCounter++;
        }
    }
  });
 
  // INSTRUCTION_MAP entry for "NOT" -------------------------------------- 
  INSTRUCTION_MAP.put(0x8, (arg, level) -> {
    if(level != 0){
      throw new IllegalArgumentException(
          "Illegal indirection level in NOT instruction");
    } if(cpu.accumulator == 0) {
      cpu.accumulator = 1;
      cpu.programCounter++;
    } else {
      cpu.accumulator = 0;
      cpu.programCounter++;
    }
  });
  
  //INSTRUCTION_MAP entry for CMPZ ----------------------------------------
  INSTRUCTION_MAP.put(0x9, (arg, level) -> {
    if(level != 1){
      throw new IllegalArgumentException(
      "Illegal indirection level in CMPZ instruction");
    } else if(level == 1){
      if(memory.getData(arg) == 0){
        cpu.accumulator = 1;
        cpu.programCounter++;        
      } else{
        cpu.accumulator = 0;
        cpu.programCounter++;
      }
    }
  });
  
  //INSTRUCTION_MAP entry for CMPL ----------------------------------------
  INSTRUCTION_MAP.put(0xA, (arg, level) -> {
    if(level != 1){
      throw new IllegalArgumentException(
      "Illegal indirection level in CMPL instruction");
    } else if(level == 1){
      if(memory.getData(arg) < 0){
        cpu.accumulator = 1;
        cpu.programCounter++;        
      } else{
        cpu.accumulator = 0;
        cpu.programCounter++;
      }
    }
  });
  
  // INSTRUCTION_MAP entry for "JUMP" -------------------------------------
  INSTRUCTION_MAP.put(0xB, (arg, level) -> {
    if(level < 0 || level > 1) {
      throw new IllegalArgumentException(
          "Illegal indirection level in JUMP instruction");
    } if(level == 1) {
      INSTRUCTION_MAP.get(0xB).execute(memory.getData(arg), level-1);
    } else if(level == 0) {
      cpu.programCounter = arg;
    }
  });
  
  // INSTRUCTION_MAP entry for "JMPZ" -------------------------------------
  INSTRUCTION_MAP.put(0xC, (arg, level) -> {
    if(level < 0 || level > 1) {
      throw new IllegalArgumentException(
          "Illegal indirection level in JMPZ instruction");
    } if(level == 1) {
      INSTRUCTION_MAP.get(0xC).execute(memory.getData(arg), level-1);
    } else if(level == 0 && cpu.accumulator == 0) {
      cpu.programCounter = arg;
    } else if(level == 0 && !(cpu.accumulator == 0)) {
      cpu.programCounter++;
    }
  });
  
  //INSTRUCTION_MAP entry for "HALT" --------------------------------------
  INSTRUCTION_MAP.put(0xF, (arg, level) -> {
    halt();
  });

  //INSTRUCTION_MAP entry for ROT -----------------------------------------
	INSTRUCTION_MAP.put(0x14, (arg, level) ->{
		if(level != 1){
			throw new IllegalArgumentException(
			"Illegal indirection level in ROT instruction");
		} else if(level == 1){
				int start = memory.getData(arg);
				int length = memory.getData(arg+1);
				int move = memory.getData(arg+2);
				if(start<0 || length<0 || start+length -1 >= memory.DATA_SIZE || !(start <= arg+2 && start + length -1 <= arg)){
					throw new IllegalArgumentException(
					"Illegal indirection level in ROT instruction");
				} else{
            if(move < 0){
              for(int i = 0; i < java.lang.Math.abs(move); i++){
                cpu.accumulator = getData(start);
                for(int k = 0; k < length-1; k++){
                  setData(start + k, getData(start + k + 1));
                }
                setData(start + length-1, cpu.accumulator);
              }
            } else if(move > 0){
              for(int i = 0; i < java.lang.Math.abs(move); i++){
                cpu.accumulator = getData(start+length-1);
                for(int k = length-1; k > 0; k--){
                  setData(start + k, getData(start+k-1));
                }
                setData(start, cpu.accumulator);
              }
            }
				}
			}
	});

  }
	
  //Constructor -----------------------------------------------------------
	public MachineModel()
	{
		this(false);
	}

  //Setters ---------------------------------------------------------------
	public void setData(int index, int value)
	{
		memory.setData(index, value);
	}
  
	void setAccumulator(int i)
	{
		cpu.accumulator = i;
	}
  
	public void setProgramCounter(int i) {
		cpu.programCounter = i;
	}
  
	public void setCode(Code aCode)
	{
		this.code = aCode;
	}
  
  public void setRunning(boolean running)
  {
    this.running = running;
  }
  
  //Getters ---------------------------------------------------------------
	public int getData(int index)
	{
		return memory.getData(index);
	}

	public Instruction get(Integer key)
	{
		return INSTRUCTION_MAP.get(key);
	}

	int[] getData()
	{
		return memory.getData();
	}

	int getProgramCounter()
	{
		return cpu.programCounter;
	}

	int getAccumulator()
	{
		return cpu.accumulator;
	}

	public int getChangedIndex() {
		return memory.getChangedIndex();
	}
  
  public Code getCode()
  {
    return code;
  }
  
  public boolean isRunning()
  {
    return running;
  }
  
  //Methods ---------------------------------------------------------------
	public void halt() {
		if(withGUI) {
			running = false;
		} else {
			System.exit(0); 
		}
	}

	public void clearMemory() {
		memory.clear();
	}

  public void step()
	{
		// Use pc and the getters of Code to get the opcode (use getOp),
		// arg, and indirectionLevel
		try {
			int pc = cpu.programCounter;
			int opcode = code.getOp(pc);
			int arg = code.getArg(pc);
			int indirectionLevel = code.getIndirectionLevel(pc);
			get(opcode).execute(arg, indirectionLevel);
		} catch(Exception e) {
			halt();
			throw e;
		}
  }

	public void clear()
	{
		memory.clear();
		if(code != null) {
			code.clear();
			cpu.accumulator = 0;
			cpu.programCounter = 0;
		}
  }
  
  /**
	* Main method that drives the whole simulator ---------------------------
	* @param args command line arguments are not used
	*/
	public static void main(String[] args) {
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new MachineView(new MachineModel(true));
			}
		});
	}
}
