package pippin;

import java.util.Set;
import java.util.TreeSet;
import java.io.File;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Map;
import java.io.FileNotFoundException;
import java.io.PrintWriter;

public class Assembler {
	/**
	* lists the mnemonics of the instructions that do not have arguments
	*/
	public static Set<String> noArgument = new TreeSet<String>();
	/**
	* lists the mnemonics of the instructions that allow immediate addressing
	*/
	public static Set<String> allowsImmediate = new TreeSet<String>();
	/**
	* lists the mnemonics of the instructions that allow indirect addressing
	*/
	public static Set<String> allowsIndirect = new TreeSet<String>();
	
	static {
		noArgument.add("HALT");
		noArgument.add("NOP");
		noArgument.add("NOT");
		allowsImmediate.add("LOD");
		allowsImmediate.add("ADD");
    allowsImmediate.add("SUB");
    allowsImmediate.add("MUL");
    allowsImmediate.add("DIV");
    allowsImmediate.add("AND");
    allowsImmediate.add("JUMP");
    allowsImmediate.add("JMPZ");
		allowsIndirect.add("LOD");
    allowsIndirect.add("STO");
    allowsIndirect.add("ADD");
    allowsIndirect.add("SUB");
    allowsIndirect.add("MUL");
    allowsIndirect.add("DIV");
	}
  
  /**
  * Method to assemble a file to its binary representation. If the input has errors
  * a list of errors will be written to the errors map. If there are errors,
  * they appear as a map with the line number as the key and the description of the error
  * as the value. If the input or output cannot be opened, the "line number" key is 0.
  * @param input the source assembly language file
  * @param output the binary version of the program if the source program is
  * correctly formatted
  * @param errors the errors map
  * @return
  * @author Omowumi Lynda Ademola
  * @author Rachael Wang
  */
  public static boolean assemble(File input, File output, Map<Integer, String> errors) {
    ArrayList<String> inputText = new ArrayList<>();
    
    try (Scanner inp = new Scanner(input)) {
      //while loop reading the lines from input in inputText      
      while(inp.hasNextLine())
      {
        inputText.add(inp.nextLine());
      }
    } catch (FileNotFoundException e) {
    errors.put(0, "Error: Unable to open the input file");
    }
    
    int blankLnNum = -1;
    ArrayList<String> inCode = new ArrayList<>();
    ArrayList<String> inData = new ArrayList<>();
    ArrayList<String> outCode = new ArrayList<>();
    ArrayList<String> outData = new ArrayList<>();
    /**
    * Goes through all the lines and checks for white spaces in a line
    * and blank line before code and data lines
    */
    for(int i = 0; i < inputText.size(); i++)
    {
      if(inputText.get(i).length() > 0){
          if((i > 0 && blankLnNum != -1) || blankLnNum == 1)            
          {
            errors.put(blankLnNum, "Error on line " + blankLnNum + ": illegal blank line");
          }
        //Checks if there are blank spaces in line
        if((inputText.get(i).length() > 0 && (inputText.get(i).charAt(0) == ' ' || inputText.get(i).charAt(0) == '\t' 
          ))) //&& (inputText.get(i).charAt(1) != ' ')
        { //Checks if after trimmed the line has code in it; give error if does
          if(inputText.get(i).trim().length() > 0){
            errors.put(i+1, "Error on line " + (i+1) + ": starts with white space");
          }
        }
      } else if(inputText.get(i).trim().length() == 0 && i != inputText.size() - 1)
      {
        if((i > 0 && inputText.get(i-1).trim().length() != 0) || i == 0)
        {
          blankLnNum = i+1;
        }
      }
    }
    int lastPosition = 0;
    /**
    * Goes through the lines and adds all code lines into inCode arraylist
    * breaks when it finds a data line or there are no more code lines left
    */
    for(int j = 0; ((j < inputText.size()) && !(inputText.get(j).trim().equalsIgnoreCase("DATA")) 
        && (inputText.get(j).trim().length() > 0)); j++)
    {
      String line = inputText.get(j).trim();
      inCode.add(line);
      lastPosition = j;
    }
    /**
    * This picks up from the position after the Data line and add them to
    * the inData arraylist
    */
    if(inputText.size() > lastPosition+1){
      if(inputText.get(lastPosition+1).trim().equalsIgnoreCase("DATA"))
      {
        if(!(inputText.get(lastPosition+1).trim().equals("DATA"))){
          errors.put(lastPosition+2, "Error on line" + lastPosition+2 + ": incorrect case");
        }
        for(int k = lastPosition+2; (k < inputText.size() && inputText.get(k).trim().length() > 0); k++)
        {
          String line = inputText.get(k).trim();
          inData.add(line);
        }
      }
    }
    int offset = 1;
    /**
    * This checks if code is formatted correctly to be put into outCode arraylist
    * otherwise errors are put into a map
    */
    for(int i = 0; i < inCode.size(); i++)
    {
      String[] parts = inCode.get(i).split("\\s+");
      if(!InstructionMap.opcode.containsKey(parts[0].toUpperCase()))
      {
        errors.put(i+1, "Error on line" + i+1 + ": illegal mnemonic");
      } if(!InstructionMap.opcode.containsKey(parts[0])){
          errors.put(i+1, "Error on line" + i+1 + ": mnemonics must be uppercase");
        }
      if(InstructionMap.opcode.containsKey(parts[0])){
        if(noArgument.contains(parts[0]) && parts.length > 1){
          errors.put(i+1, "Error on line" + i+1 + ": mnemonic does not take arguments");
        } else if(noArgument.contains(parts[0]) && parts.length == 1){
          outCode.add(Integer.toString(InstructionMap.opcode.get(parts[0]),16) + " 0 0");
        } else if(noArgument.contains(parts[0]) && parts.length > 2){
          errors.put(i+1, "Error on line" + i+1 + ": mnemonic has too many arguments");
        } else{
          if(parts.length > 1){
            if(parts[1].length() >=3 && parts[1].substring(0,2).equals("[["))
            {
              if(allowsIndirect.contains(parts[0]))
              {
                try{
                  int arg = Integer.parseInt(parts[1].substring(2),16);
                  outCode.add(Integer.toString(InstructionMap.opcode.get(parts[0]),16) + " " +
                    Integer.toString(arg,16).toUpperCase() + " 2");
                  } catch(NumberFormatException e) { 
                      errors.put(i+1, "Error on line "+(i+1)+ ": indirect argument is not a hex number");
                  } 
              } else{
                  errors.put(i+1, "Error on line" + i+1 + ": mnemonic does not allow indirect addressing");
              }
            } else if(parts[1].length() >= 2 && parts[1].substring(0,1).equals("["))
            {
                try{
                  int arg = Integer.parseInt(parts[1].substring(1),16);
                  outCode.add(Integer.toString(InstructionMap.opcode.get(parts[0]),16) + " " +
                    Integer.toString(arg,16).toUpperCase() + " 1");
                } catch(NumberFormatException e) { 
                    errors.put(i+1, "Error on line "+(i+1)+ ": direct argument is not a hex number");
                } 
            } else if(parts[1].length() >= 1 && !parts[1].substring(0,1).equals("["))
            {
              if(allowsImmediate.contains(parts[0]))
              {
                if(!((parts.length) > 2)){
                  try{
                    //int arg = Integer.parseInt(parts[1].substring(1),16);
                    int arg = Integer.parseInt(parts[1],16);
                    outCode.add(Integer.toString(InstructionMap.opcode.get(parts[0]),16) + " " +
                      Integer.toString(arg,16).toUpperCase() + " 0");
                  } catch(NumberFormatException e) { 
                      errors.put(i+1, "Error on line "+(i+1)+ ": immediate argument is not a hex number");
                  }
                } else{
                  errors.put(i+1, "Error on line" + (i+1) + ": illegal arguments");
                }
              } else{
                errors.put(i+1, "Error on line"+ (i+1) +": mnemonic does not allow immediate addressing");
              }
            }
          } else{
            errors.put(i+1, "Error on line" + (i+1) + ": mnemonic requires arguments");
          }  
        }
      }
      offset++;
    }
    /**
    * Goes through the inData arraylist and checks if the data values and
    * memory are valid to be placed 
    */
    for(int j = 0; j < inData.size(); j++)
    {
      String[] parts = inData.get(j).split("\\s+");
      if(parts.length != 2){
        errors.put(offset+j, "Error on line" + (offset+j) + ": not address/value pair");
      } else{
          int addr = -1;
          int val = -1;
          try{
            addr = Integer.parseInt(parts[0],16);
            if(addr < 0){
              errors.put(offset+j, "Error on line" + (offset+j) + ": negative address not allowed");
            }            
          } catch(NumberFormatException e) {
              errors.put(offset+j, "Error on line" + (offset+j) +": address not hex number");
          }
          try{
            val = Integer.parseInt(parts[1],16);
          } catch(NumberFormatException e){
              errors.put(offset+j, "Error on line" + (offset+j) +": value not hex number");
          }
          outData.add(Integer.toString(addr,16).toUpperCase()+" "+ Integer.toString(val,16).toUpperCase());
      }
    }
    /**
    * If there were no errors tries to assemble code
    */
    if(errors.size() == 0) {
      try (PrintWriter outp = new PrintWriter(output)){
        for(String str : outCode) outp.println(str);
        outp.println(-1); // the separator where the source has DATA
        for(String str : outData) outp.println(str);
      } catch (FileNotFoundException e) {
          errors.put(0, "Error: Unable to write the assembled program to the output file");
      }
    } 
    return errors.size() == 0; //TRUE means there were no errors
  }
}
